// NAME: Kenneth Boorom
//
// FILE: ComplexImport.cs
//
// Date: June 29, 2017
//
// Narrative:  This implements a single class, ComplexImport, which simplifies importing 
// of a complex array from Matlab.  This assumes the array has been displayed in text format.
//
// The text can be pasted into an intialization call (example below) to initialize the array
//
//
//         ComplexImport.InitializeComplexFromMatlabText(numberPoles,
//                @"   -6.450250642504456e+09 + 5.377378232990338e+10i
//                     -6.450250642504456e+09 - 5.377378232990338e+10i
//                     -6.959935757270790e+09 + 3.613795332508782e+10i")
//
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using System.Numerics;
namespace EyeDiagramWithGraph
{
    public static class ComplexImport
    {

        public static Complex[] InitializeComplexFromMatlabText(int numberExpected, string numbersAsText)
        {
            Complex[] returnComplexArray = new Complex[numberExpected];

            var splitToLines = numbersAsText.Split(new[] { '\r', '\n' });           // Each member of splitToLines should have 1 complex number

            // SAMPLE FORMAT FOR A STRING:  -0.6450 - 5.3774i
            int rtnCount = 0;

            foreach (string oneLine in splitToLines)
            {
                double realPart, imaginaryPart;

                string oneNumber = oneLine.Trim();

                // Check for obvious problems
                if (oneNumber.IndexOf('i') != (oneNumber.Length - 1))
                    throw new ArgumentException($"Improperly formatted complex number - need inform x + yi {oneNumber}");

                // Ignore blank lines
                //if (oneNumber.Length == 0)
                //    throw new ArgumentException($"List of complex numbers has blank lines");

                if (oneNumber.Length == 0)
                    continue;

                // Format is generated by matlab in response to "format long e" command
                // SAMPLE STRING SHOWING INDICES:
                // -6.450250642504456e+09 + 5.377378232990338e+10i
                // 01234567890123456789012345678901234567890123456789

                // Remove the i
                oneNumber = oneNumber.Substring(0, oneNumber.Length - 1);

                // Split the real and imaginary.  IN above example, endOfReal will be 7
                int endOfReal = oneNumber.IndexOf(' ', 3);
                if (endOfReal < 0)
                    throw new ArgumentException($"Improperly formatted complex number - must be real<space>+<space>imaginary {oneNumber}");

                string justReal = oneNumber.Substring(0, endOfReal).Trim();
                if (double.TryParse(justReal, out realPart) == false)
                    throw new ArgumentException($"Can't parse real portion of complex number {oneNumber}");

                // Need to get the sign after the space
                string justImaginary = oneNumber.Substring(endOfReal + 1);
                justImaginary = justImaginary.Replace(" ", string.Empty);       // Thow out space between sign and number
                if (double.TryParse(justImaginary, out imaginaryPart) == false)
                    throw new ArgumentException($"Can't parse imaginary portion of complex number {oneNumber}");

                rtnCount++;

                if (rtnCount > numberExpected)
                    throw new ArgumentException($"Expected {numberExpected} complex numbers, but found more");

                returnComplexArray[rtnCount - 1] = new Complex(realPart, imaginaryPart);
            }

            if (rtnCount != numberExpected)
                throw new ArgumentException($"Expected {numberExpected} complex numbers, but found more {rtnCount}");

            return returnComplexArray;
        }
    }




}
